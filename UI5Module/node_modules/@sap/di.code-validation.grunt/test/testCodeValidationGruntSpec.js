var expect = require('chai').expect;
var assert = require('chai').assert;
var path = require('path');
var fs = require('fs');
var endOfLine = require('os').EOL;
var cp = require("child_process");

describe('code validation from grunt', function() {
    var projectDir = path.join(__dirname, "dummyproject");
    var logFile = path.join(projectDir, "code-validation-test.log");//file as declare in the grunt file - resultFilePath option
    this.timeout(5000); // A very long environment setup.

    before(function () {
    });

    beforeEach(function () {
        console.log("in before each test ");
        if (fs.existsSync(logFile)) {
            console.log("in test - delete results file" + endOfLine);
            fs.unlinkSync(logFile);
        }
    });

    it('check validation pass successfully', function(done) {
        //expect(true).to.be.true;
        //done();
        console.log("in check validation pass successfully test ");
        var workDir = process.cwd();
        console.log("in check validation workDir: " + workDir + endOfLine);
        cp.exec('grunt codevalidation', {cwd:workDir}, function(error, stdout, stderr) {
            console.log("in check validation grunt");
            if (error) {
                console.error('grunt call error ' + error);
                return;
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }
            if (!fs.existsSync(logFile)) {
                console.log("in test - file not found - " + logFile + endOfLine);
                assert.fail(null, logFile, "file not exists");
            }
            var content = fs.readFileSync(logFile, 'utf8');
            var fullResult = JSON.parse(content);
            expect(fullResult).to.exists;
            expect(fullResult["results"]["dummyvalidator"]).to.exists;
            var result = fullResult["results"]["dummyvalidator"]["issues"];
            var testFileRelativePath = path.join("testContent", "test.js");
            expect(result[testFileRelativePath]).to.exists;
            expect(result[testFileRelativePath]).to.have.length(1);
            var testSkipNode_ModulesByDefault = path.join("testContent", "node_modules", "test.js");
            expect(result[testSkipNode_ModulesByDefault]).to.be.undefined;
            done();
        });

    });

    after(function () {
    });
});
