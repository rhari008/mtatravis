/*global module:false*/
var path = require('path');
module.exports = function (grunt) {
    "use strict";

    var pkg = grunt.file.readJSON('package.json');

    // Project configuration.
    grunt.initConfig({
        // Task configuration.
        pkg: pkg,
        eslint: {
            src: [
                "**/*.js",
                "!**/node_modules/**/*.js",
                "!**/test/**/*.js"
            ],
            options: {
                outputFile: "target/eslint.xml"
            }
        },
        codevalidation: {
            js: {
                options: {
                    reporter: "problems_reporter",
                    reporterOptions: {outputFile: path.join(__dirname , "test", "dummyproject", "code-validation-test.log")},
                    ignoredPaths:[ path.join(__dirname , "test", "dummyproject", "node_modules")],
                    projectPath: path.join(__dirname, "test", "dummyproject"),
                    validators: {
                        "dummyvalidator": {
                            extensions: [".js"]
                        }
                    }
                }
            }
        },
        mochaTest: {
            test: {
                options: {
                    reporter: 'mocha-junit-reporter',
                    reporterOptions: {
                        mochaFile: 'tests/codevalidation-grunt/TEST-index.xml'
                    },
                    colors: true,
                    summery: true,
                    captureFile: 'tests/codevalidation-grunt/output.txt', // Optionally capture the reporter output to a file
                    quiet: false, // Optionally suppress output to standard out (defaults to false)
                    clearRequireCache: false // Optionally clear the require cache before running tests (defaults to false)
                },
                src: ['test/*Spec.js']
            }
        },
        bump: {
            commit: false,
            createTag: false,
            push: false
        }
    });

    grunt.registerTask('verify-no-only-in-specs',
        'Makes sure no define.only or it.only functions are left', function () {
            grunt.file.expand(['**/test/**/*Spec.js']).forEach(function (f) {
                var contents = grunt.file.read(f);
                if (contents.search('describe.only') !== -1) {
                    grunt.fail.fatal(
                        "------------------------------------------------------------------------------\n" +
                        "ERROR: describe.only() found in " + f + " \n" +
                        "------------------------------------------------------------------------------");
                }

                if (contents.search('it.only') !== -1) {
                    grunt.fail.fatal(
                        "------------------------------------------------------------------------------\n" +
                        "ERROR: it.only() found in " + f + " \n" +
                        "------------------------------------------------------------------------------");
                }
            });
        }
    );

    grunt.loadTasks('tasks');
    grunt.loadNpmTasks('grunt-npm-install');
    grunt.loadNpmTasks("gruntify-eslint");
    grunt.loadNpmTasks('grunt-mocha-test');
    grunt.loadNpmTasks('grunt-bump');

    grunt.registerTask('validations', [
        'verify-no-only-in-specs',
        'eslint'
    ]);

    grunt.registerTask('test', [
        'npm-install:file:./test/dummyvalidator',
        'mochaTest'
    ]);

    grunt.registerTask('codevalidation-grunt-voter', [
        'test'
    ]);

};
