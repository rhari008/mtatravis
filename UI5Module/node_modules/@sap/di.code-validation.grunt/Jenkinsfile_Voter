@Library('piper-lib') _
@Library('features-pipeline-lib') __
import com.sap.icd.jenkins.Utils

piperUtils = new Utils()


stage("Run tests") {
	node(){
		checkout scm;
		echo "Running voter on commitId ${piperUtils.getGitCommitId()}"
	}
	parallel(
		'Whitesource_scan': {
			node {
				timestamps {
					ansiColor('xterm') {
						checkout scm
						executeWhitesourceScan.withNpm(file: './package.json')
					}
				}
			}
		},
		'codevalidation-grunt-voter': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						echo "retrieving git structure from repository"
						def gitUrl = piperUtils.getGitRemoteUrl()
						def githubRepoName = piperUtils.getRepositoryFromGitUrl(gitUrl)
						try {
							// missing unit test and coverage report
							sh """
									./setup-env.sh;
									grunt codevalidation-grunt-voter;
								"""
						}
						finally {
							junit testDataPublishers: [[$class: 'AttachmentPublisher'], [$class: 'StabilityTestDataPublisher']], testResults: '**/*TEST-*.xml';
							archive "**/*TEST-*.xml";
						}
					}
				}
			}
		},
		'codevalidation-grunt_validations': {
			devxPodTemplate() {
				timestamps {
					ansiColor('xterm') {
						checkout scm;
						// missing CheckStyle XML
						try {
							sh "./setup-env.sh; grunt validations";
						}
						finally {
							checkstyle canComputeNew: false, canRunOnFailed: true, defaultEncoding: '', healthy: '', pattern: '**/target/eslint.xml', unHealthy: '', unstableTotalHigh: '1';
						}
					}
				}
			}
		}
	)
}
