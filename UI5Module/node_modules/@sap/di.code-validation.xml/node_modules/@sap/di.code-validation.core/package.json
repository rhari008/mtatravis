{
  "_args": [
    [
      {
        "raw": "@sap/di.code-validation.core@1.0.11",
        "scope": "@sap",
        "escapedName": "@sap%2fdi.code-validation.core",
        "name": "@sap/di.code-validation.core",
        "rawSpec": "1.0.11",
        "spec": "1.0.11",
        "type": "version"
      },
      "/Users/i048564/Documents/Eclipse/workspace/MTASampleHTML/UI5Module/node_modules/@sap/di.code-validation.xml"
    ]
  ],
  "_from": "@sap/di.code-validation.core@1.0.11",
  "_id": "@sap/di.code-validation.core@1.0.11",
  "_inCache": true,
  "_location": "/@sap/di.code-validation.xml/@sap/di.code-validation.core",
  "_nodeVersion": "6.9.2",
  "_npmUser": {
    "name": "https-support.sap.com",
    "email": "do.not.reply@sap.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@sap/di.code-validation.core@1.0.11",
    "scope": "@sap",
    "escapedName": "@sap%2fdi.code-validation.core",
    "name": "@sap/di.code-validation.core",
    "rawSpec": "1.0.11",
    "spec": "1.0.11",
    "type": "version"
  },
  "_requiredBy": [
    "/@sap/di.code-validation.xml"
  ],
  "_resolved": "https://npm.sap.com/@sap/di.code-validation.core/-/di.code-validation.core-1.0.11.tgz",
  "_shasum": "6a27eae94e6b8eb17da472780c30307caada175c",
  "_shrinkwrap": {
    "dependencies": {
      "type-check": {
        "requires": {
          "prelude-ls": "1.1.2"
        },
        "version": "0.3.2",
        "integrity": "sha1-WITKtRLPHTVeP7eE8wgEsrUg23I="
      },
      "deep-is": {
        "version": "0.1.3",
        "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="
      },
      "fast-levenshtein": {
        "version": "1.1.4",
        "integrity": "sha1-5qdUzI8V5YmHqpy9J69m/W9OWvk="
      },
      "q": {
        "version": "1.5.1",
        "integrity": "sha1-fjL3W0E4EpHQRhHxvxQQmsAGUdc="
      },
      "prelude-ls": {
        "version": "1.1.2",
        "integrity": "sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="
      },
      "wordwrap": {
        "version": "1.0.0",
        "integrity": "sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="
      },
      "levn": {
        "requires": {
          "prelude-ls": "1.1.2",
          "type-check": "0.3.2"
        },
        "version": "0.3.0",
        "integrity": "sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4="
      },
      "optionator": {
        "requires": {
          "type-check": "0.3.2",
          "deep-is": "0.1.3",
          "fast-levenshtein": "1.1.4",
          "prelude-ls": "1.1.2",
          "wordwrap": "1.0.0",
          "levn": "0.3.0"
        },
        "version": "0.8.1",
        "integrity": "sha1-4xtJMs3V+4Yqiw0QvGPT7h7H14s="
      }
    },
    "version": "1.0.11",
    "requires": true,
    "name": "@sap/di.code-validation.core",
    "lockfileVersion": 1
  },
  "_spec": "@sap/di.code-validation.core@1.0.11",
  "_where": "/Users/i048564/Documents/Eclipse/workspace/MTASampleHTML/UI5Module/node_modules/@sap/di.code-validation.xml",
  "bin": {
    "validationframework": "bin/run.js"
  },
  "bugs": {
    "url": "https://github.com/DevX/CodeValidation/issues"
  },
  "config": {},
  "dependencies": {
    "optionator": "0.8.1",
    "q": "1.5.1"
  },
  "description": "Code validation",
  "devDependencies": {
    "amdefine": "1.0.0",
    "bump": "0.2.5",
    "chai": "3.5.0",
    "chai-string": "^1.3.0",
    "debug": "^2.6.3",
    "eslint": "^3.0.1",
    "grunt": "^1.0.1",
    "grunt-bump": "0.7.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-istanbul-coverage": "^0.1.4",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-mocha-test": "^0.13.2",
    "gruntify-eslint": "^2.0.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2",
    "mocha-junit-reporter": "^1.12.1",
    "sinon": "1.17.2",
    "whitesource": "0.3.13"
  },
  "dist": {
    "shasum": "6a27eae94e6b8eb17da472780c30307caada175c",
    "tarball": "https://npm.sap.com/@sap/di.code-validation.core/-/di.code-validation.core-1.0.11.tgz"
  },
  "engines": {
    "npm": ">=3.0.0"
  },
  "homepage": "https://github.com/DevX/CodeValidation#readme",
  "license": "SEE LICENSE IN developer-license-3.1.txt",
  "main": "./src/api.js",
  "maintainers": [
    {
      "name": "https-support.sap.com",
      "email": "do.not.reply@sap.com"
    }
  ],
  "name": "@sap/di.code-validation.core",
  "optionalDependencies": {},
  "readme": "# di.code-validation.core  \ncode validation controller for DI.\nreturning issues in code according to validators configured\n\n### install\n\nnpm install di.code-validation.core --save-dev\n\n### CodeValidation API\n\n```javascript\nexecuteForProject(projectPath, workspaceRootName, configuration, callbackFunction)\n```\n\n_basePath_ - full path for the validated folder location\n\n_options_ - an object to set additional options for execution and return values processing.\n\n_options.pathPrefix_ - validation issues paths are relative to the project path. _pathPrefix enable to set constant prefix to the returned path.\n\n_configuration_ - configuration of the validators to execute.  object of type _ValidationConfig_\n\n_callbackFunction_ - callback of results. (TBD: add also failure for callback?)\n\n_ValidationConfig_ structure:\n```javascript\n  {\n      \"validators\" : {\n          \"validator1\" : {\n              \"extensions\" : ['.js', '.xsjs'],\n              \"filters\": {\n                  \"levels\" :[\"error\", \"warning\", \"info\"]\n              }\n          },\n          \"validator2\" : {\n              \"extensions\" : ['.new'],\n              \"filters\": {\n                  \"levels\" :[\"error\"]\n              }\n          }\n          ....\n      }\n  }\n```\n\n_result_ structure:\n```javascript\n{\n    \"validator_id\" : {\n        \"issues\" : {\n            \"relative_file_path\" : [\n                {\n                    \"category\" : \"Possible Error\",\n                    \"checker\" : \"validator checker name\",\n                    \"column\" : 1,\n                    \"line\" : 14,\n                    \"message\" : \"some message\",\n                    \"path\" : \"relative_file_path\",\n                    \"ruleId\" : \"optional name of rule\",\n                    \"severity\" : \"error\"\n                }\n                ....\n            ]\n        }\n        ....\n    }\n}\n```\n\n#### validator API\n\nEach validator should implement following API:\n\n```javascript\n  validateFiles(validationMetadata, fileResources)\n```\n\n  _validationMetadata_ - contains following methods:\n  \n      getRootPath() - workspaceRootName\n  \n      getLevels() - array of levels of issues to return\n  \n  _fileResources_ - array of files to validate (TBD: enable validation by extension of regular expression)\n  \n      getPath() - returns the file full path\n      \n      getText() - returns the text in the file\n\n#### run validation from command line\n\nnode di.code-validation.core\\bin\\run.js \"project file location\" \"client workspace root path\"\n\n--c \"configuration file location\" - file with validation configuration. if not supplied defaults used.\n\nExample for configuration file:\n\n```javascript\n  var configParam = { \n    \"validators\" : { \n      \"di.code-validation.js\" : { \n          \"extensions\" : [\".js\", \".xsjs\"], \n          \"filters\": { \n            \"levels\" :[\"error\", \"warning\", \"info\"] \n            } \n          } \n        } \n      };\n  module.exports =  configParam;\n```\n\n--l \"log file\" - location of the outpul log file. default is the execution directory\n\n### default configuration:\n\n```javascript\n  validators: {\n    \"di.code-validation.js\": {\n      extensions: [\".js\", \".xsjs\"]\n    },\n    \"di.code-validation.xml\": {\n      extensions: [ \".xml\"]\n    }\n  }\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DevX/CodeValidation.git"
  },
  "scripts": {},
  "version": "1.0.11"
}
